#include<stdio.h>
#include<conio.h>
#include<malloc.h>

struct node
{
 int info;
 struct node *lchild;
 struct node *rchild;
}*root;

     void  case_a(struct node *parent,struct node *location)
       {

	if(parent==NULL)
	 root=NULL;
	else
	 if(location==parent->lchild)
	    parent->lchild=NULL;
       else

	parent->rchild=NULL;
       }


     void  case_b(struct node *parent,struct node*loc)
       {
	struct node *ch;
	if(loc->lchild!=NULL)
	   ch=loc->lchild;
	else
	 ch=loc->rchild;
	if(parent==NULL)
	   root=ch;
	else
	 if(loc==parent->lchild)
	   parent->lchild=ch;
	 else
	  parent->rchild=ch;
	}


       void  case_c(struct node*par,struct node *loc)
	 {

	  struct node*ptr,*ptrsave,*suc,*parsuc;
	  ptrsave=loc;
	  ptr=loc->rchild;
	while(ptr->lchild!=NULL)
	{
	 ptrsave=loc;
	 ptr=loc->rchild;
	 while(ptr->lchild!=NULL)
	 {
	  ptrsave=loc;
	  ptr=ptr->lchild;
	}
	 suc=ptr;
	 parsuc=ptrsave;

	  if(suc->lchild==NULL&&suc->rchild==NULL)
	     case_a(ptrsave,suc);
	  else
	     case_b(parsuc,suc);
	  if(par==NULL)
	   root=suc;
	  else
	   if(loc==par->lchild)
	   par->lchild=suc;
	   else
	    par->rchild=suc;
	    suc->lchild=loc->lchild;
	    suc->rchild=loc->rchild;
	  }

	}


void find(int item,struct node**par,struct node**loc)
{

    struct node *ptr,*ptrsave,*temp;

    if(root==NULL)
    {
    *loc=NULL;
    *par=NULL;
    return;
    }



   if(item==root->info)
   {
    *loc=root;
    *par=NULL;
    return;
   }
    if(item<root->info)
     ptr=root->lchild;
    else
     ptr=root->rchild;
     ptrsave=root;
     while(ptr!=NULL)
     {
      if(item==ptr->info)
      {
       *loc=ptr;
       *par=ptrsave;
       return;
      }
       ptrsave=ptr;
       if(item<ptr->info)
	ptr=ptr->lchild;
       else
	ptr=ptr->rchild;
      }
       *loc=NULL;
       *par=ptrsave;
      }


     void insert(int item)
       {

	struct node *tmp,*parent,*location;
	find(item,&parent,&location);
	if(location!=NULL)
	{
	 printf("ITEM ALREADY PRESENT");
	 return;
	}
	 tmp=(struct node *)malloc(sizeof(struct node));
	 tmp->info=item;
	 tmp->lchild=NULL;
	 tmp->rchild=NULL;
	 if(parent==NULL)
	  root=tmp;
	 else
	  if(item<parent->info)
		  parent->lchild=tmp;
	  else
	    parent->rchild=tmp;


	}



	 void del(int item)
	 {
	  struct node *parent,*location;
	  if(root==NULL)
	 {
	  printf("Tree is empty");
	  return;
	 }
	 find(item,&parent,&location);
	 if(location==NULL)
	 {
	 printf("Item not present in tree");
	 return;
	 }

       if(location->lchild==NULL&&location->rchild==NULL)
	  case_a(parent,location);
       if(location->lchild!=NULL&&location->rchild==NULL)
	  case_b(parent,location);
       if(location->lchild==NULL&&location->rchild!=NULL)
	  case_b(parent,location);
       if(location->lchild!=NULL&&location->rchild!=NULL)
	  case_c(parent,location);
       free (location);
      }

	void  preorder(struct node*ptr)
	  {
	   if(root==NULL)
	   {
	    printf("Tree is empty");
	    return ;
	   }
	 if(ptr!=NULL)
	   {
	   printf("%d",ptr->info);
	   preorder(ptr->lchild);
	   preorder(ptr->rchild);
	  }
	}



      void inorder(struct node*ptr)
	{
	if(root==NULL)
	{
	 printf("Tree is empty");
	 return;
	}
      if(ptr!=NULL)
      {
      inorder(ptr->lchild);
      printf("%d",ptr->info);
      inorder(ptr->rchild);
     }
   }



   void postorder(struct node*ptr)
     {
      if(root==NULL)
      {
       printf("Tree is empty");
       return;
      }
      if(ptr!=NULL)
     {
      postorder(ptr->lchild);
      postorder(ptr->rchild);
      printf("%d",ptr->info);
      }
    }




   void  display(struct node *ptr,int level)
     {
      int i;
      if(ptr!=NULL)
      {
       display(ptr->rchild,level+1);
       printf("\n");
       for(i=0;i<level;i++)
       printf(" ");
       printf("%d",ptr->info);
       display(ptr->lchild,level+1);
      }
  }



int main()
{
 int choice,num;
 root=NULL;
 clrscr();
 while(1)
 {
  printf("\n");
  printf("1.INSERT\n");
  printf("2.DELETE\n");
  printf("3.INORDER TRAVERSAL\n");
  printf("4.PREORDER TRAVERSAL\n");
  printf("5.POSTORDER TRAVERSAL\n");
  printf("6.DISPLAY\n");
  printf("7.QUIT\n");
  printf("Enter your choice:\n");
  scanf("%d",&choice);
  switch(choice)
  {
   case 1:
	   printf("Enter the number to be inserted: ");
	   scanf("%d",&num);
	   insert(num);
	   break;
   case 2:
	  printf("Enter the number to be deleted: ");
	  scanf("%d",&num);
	  del(num);
	  break;
  case 3:
	 inorder(root);
	 break;
  case 4:
	 preorder(root);
	 break;
  case 5:
	 postorder(root);
	 break;
  case 6:
	 display(root,1);
	 break;
  case 7:
	 return 0;

  default:
	  printf("Wrong choice\n");
    }
  }
}
